// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SS14.ServerHub.Shared.Data;

#nullable disable

namespace SS14.ServerHub.Shared.Migrations
{
    [DbContext(typeof(HubDbContext))]
    [Migration("20230821031330_MySQLSupport")]
    partial class MySQLSupport
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("SS14.ServerHub.Shared.Data.AdvertisedServer", b =>
                {
                    b.Property<int>("AdvertisedServerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AdvertiserAddress")
                        .HasColumnType("varchar(45)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("InfoData")
                        .HasColumnType("json");

                    b.Property<string>("StatusData")
                        .HasColumnType("json");

                    b.HasKey("AdvertisedServerId");

                    b.HasIndex("Address")
                        .IsUnique();

                    b.ToTable("AdvertisedServer", t =>
                        {
                            t.HasCheckConstraint("AddressSs14Uri", "`Address` LIKE 'ss14://%' OR `Address` LIKE 'ss14s://%'");
                        });
                });

            modelBuilder.Entity("SS14.ServerHub.Shared.Data.HubAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<Guid>("Actor")
                        .HasColumnType("char(36)");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Time");

                    b.ToTable("HubAudit");
                });

            modelBuilder.Entity("SS14.ServerHub.Shared.Data.ServerStatusArchive", b =>
                {
                    b.Property<int>("AdvertisedServerId")
                        .HasColumnType("int");

                    b.Property<int>("ServerStatusArchiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AdvertiserAddress")
                        .HasColumnType("varchar(45)");

                    b.Property<string>("StatusData")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime(6)");

                    b.HasKey("AdvertisedServerId", "ServerStatusArchiveId");

                    b.ToTable("ServerStatusArchive");
                });

            modelBuilder.Entity("SS14.ServerHub.Shared.Data.TrackedCommunity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("TrackedCommunity");
                });

            modelBuilder.Entity("SS14.ServerHub.Shared.Data.TrackedCommunityAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<byte[]>("EndAddressRange")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("StartAddressRange")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("TrackedCommunityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EndAddressRange");

                    b.HasIndex("StartAddressRange");

                    b.HasIndex("TrackedCommunityId");

                    b.ToTable("TrackedCommunityAddress");
                });

            modelBuilder.Entity("SS14.ServerHub.Shared.Data.TrackedCommunityDomain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DomainName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TrackedCommunityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrackedCommunityId");

                    b.ToTable("TrackedCommunityDomain");
                });

            modelBuilder.Entity("SS14.ServerHub.Shared.Data.UniqueServerName", b =>
                {
                    b.Property<int>("AdvertisedServerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("FirstSeen")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastSeen")
                        .HasColumnType("datetime(6)");

                    b.HasKey("AdvertisedServerId", "Name");

                    b.ToTable("UniqueServerName");
                });

            modelBuilder.Entity("SS14.ServerHub.Shared.Data.ServerStatusArchive", b =>
                {
                    b.HasOne("SS14.ServerHub.Shared.Data.AdvertisedServer", "AdvertisedServer")
                        .WithMany()
                        .HasForeignKey("AdvertisedServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdvertisedServer");
                });

            modelBuilder.Entity("SS14.ServerHub.Shared.Data.TrackedCommunityAddress", b =>
                {
                    b.HasOne("SS14.ServerHub.Shared.Data.TrackedCommunity", "TrackedCommunity")
                        .WithMany("Addresses")
                        .HasForeignKey("TrackedCommunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrackedCommunity");
                });

            modelBuilder.Entity("SS14.ServerHub.Shared.Data.TrackedCommunityDomain", b =>
                {
                    b.HasOne("SS14.ServerHub.Shared.Data.TrackedCommunity", "TrackedCommunity")
                        .WithMany("Domains")
                        .HasForeignKey("TrackedCommunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrackedCommunity");
                });

            modelBuilder.Entity("SS14.ServerHub.Shared.Data.UniqueServerName", b =>
                {
                    b.HasOne("SS14.ServerHub.Shared.Data.AdvertisedServer", "AdvertisedServer")
                        .WithMany()
                        .HasForeignKey("AdvertisedServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdvertisedServer");
                });

            modelBuilder.Entity("SS14.ServerHub.Shared.Data.TrackedCommunity", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Domains");
                });
#pragma warning restore 612, 618
        }
    }
}
